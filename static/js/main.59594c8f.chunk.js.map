{"version":3,"sources":["components/AwesomeDatePicker.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledContainer","styled","div","StyledList","ul","StyledListItem","li","rotateX","AwesomeDatePicker","minYear","maxYear","lineRotation","onChange","React","selectedDay","setSelectedDay","selectedMonth","setSelectedMonth","selectedYear","setSelectedYear","Date","currentDate","setCurrentDate","getDaysInMonth","currentMonthDays","setCurrentMonthDays","whichItem","scrollTop","Math","round","yearsList","Array","from","length","_","index","daysList","handleScrollTo","e","target","parentEl","parentElement","dataset","value","parseInt","calculateRotation","elValue","selectedValue","min","onScroll","debounce","item","map","el","data-value","onClick","rotateY","App","date","setDate","className","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59594c8f.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { getDaysInMonth } from \"date-fns\";\nimport { debounce } from \"lodash\";\nimport styled from \"styled-components\";\n\nconst StyledContainer = styled.div`\n  box-sizing: border-box;\n  font-size: 2.5rem;\n  line-height: 3rem;\n  font-weight: bolder;\n  color: blue;\n  height: 20rem;\n  display: flex;\n  justify-content: stretch;\n  align-items: center;\n  position: relative;\n  perspective: 200px;\n  perspective-origin: 50% 50%;\n  mask-image: linear-gradient(\n    to bottom,\n    transparent 17%,\n    white,\n    transparent 83%\n  );\n  ::before {\n    z-index: -1;\n    display: block;\n    content: \"\";\n    position: absolute;\n    top: calc((20rem - 3.5rem) / 2);\n    left: 0;\n    right: 0;\n    height: calc(3.5rem);\n    background-color: #dddddd;\n    border-top: 2px solid lightgray;\n    border-bottom: 2px solid lightgray;\n  }\n`;\n\nconst StyledList = styled.ul`\n  box-sizing: border-box;\n  display: block;\n  padding: 10rem 0;\n  list-style: none;\n  margin: 0 0.5rem;\n  height: 100%;\n  text-align: center;\n  scroll-behavior: smooth;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  overflow-y: scroll;\n  scroll-snap-type: y mandatory;\n\n  :first-child {\n    color: #333;\n  }\n  :last-child {\n    color: #5252ff;\n  }\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst StyledListItem = styled.li<{ rotateX?: number; rotateY?: number }>`\n  transform: scaleZ(0.8) translateZ(0.2rem)\n    rotateX(${({ rotateX }) => rotateX + \"deg\" || 0});\n  transform-origin: ${({ rotateX }) =>\n    rotateX ? (rotateX < 0 ? \"80% center\" : \"20% center\") : \"center\"};\n  transition: opacity 0.4s ease, transform 0.4s ease;\n  scroll-snap-align: center;\n  cursor: pointer;\n`;\nexport interface AwesomeDatePickerProps {\n  minYear?: number;\n  maxYear?: number;\n  lineRotation?: number;\n  onChange?: (value: Date) => void;\n}\n\nconst AwesomeDatePicker: React.FC<AwesomeDatePickerProps> = ({\n  minYear = 1950,\n  maxYear = 2050,\n  lineRotation = 20,\n  onChange,\n}) => {\n  const [selectedDay, setSelectedDay] = React.useState<number>(1);\n  const [selectedMonth, setSelectedMonth] = React.useState<number>(0);\n  const [selectedYear, setSelectedYear] = React.useState<number>(minYear);\n  const [currentDate, setCurrentDate] = React.useState<Date>(\n    new Date(selectedYear, selectedMonth, selectedDay)\n  );\n  const [currentMonthDays, setCurrentMonthDays] = React.useState<number>(\n    getDaysInMonth(currentDate)\n  );\n\n  React.useEffect(() => {\n    setCurrentMonthDays(getDaysInMonth(new Date(selectedYear, selectedMonth)));\n    setCurrentDate(new Date(selectedYear, selectedMonth, selectedDay));\n  }, [selectedDay, selectedMonth, selectedYear]);\n\n  React.useEffect(() => {\n    if (!onChange) return;\n    onChange(currentDate);\n  }, [currentDate, onChange]);\n\n  const whichItem = (scrollTop: number): number => {\n    if (scrollTop < 24) return 0;\n    return Math.round((scrollTop - 24) / 48);\n  };\n  const yearsList = Array.from(\n    { length: maxYear - minYear + 1 },\n    (_, index) => index + minYear\n  );\n\n  const daysList = Array.from(\n    { length: currentMonthDays },\n    (_, index) => index + 1\n  );\n\n  const monthList = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  const handleScrollDays = (e: React.UIEvent<HTMLUListElement, UIEvent>) => {\n    const target = e.target as HTMLUListElement;\n    const item = whichItem(target.scrollTop);\n    setSelectedDay(daysList[item]);\n  };\n  const handleScrollMonth = (e: React.UIEvent<HTMLUListElement, UIEvent>) => {\n    const target = e.target as HTMLUListElement;\n    const item = whichItem(target.scrollTop);\n    setSelectedMonth(item);\n  };\n  const handleScrollYear = (e: React.UIEvent<HTMLUListElement, UIEvent>) => {\n    const target = e.target as HTMLUListElement;\n    const item = whichItem(target.scrollTop);\n    setSelectedYear(yearsList[item]);\n  };\n\n  const handleScrollTo = (e: React.MouseEvent<HTMLElement>) => {\n    const target = e.target as HTMLLIElement;\n    const parentEl = target.parentElement;\n    if (!parentEl || !target.dataset.value) return;\n    parentEl.scrollTop = parseInt(target.dataset.value) * 48 + 24;\n  };\n\n  const calculateRotation = (elValue: number, selectedValue: number) =>\n    elValue === selectedValue\n      ? 0\n      : elValue < selectedValue\n      ? Math.min((selectedValue - elValue) * lineRotation, lineRotation * 3)\n      : -Math.min((elValue - selectedValue) * lineRotation, lineRotation * 3);\n\n  return (\n    <StyledContainer>\n      <StyledList onScroll={debounce(handleScrollDays, 100)}>\n        {daysList.map((el, index) => (\n          <StyledListItem\n            data-value={index}\n            onClick={handleScrollTo}\n            rotateY={-10}\n            rotateX={calculateRotation(el, selectedDay)}\n            key={\"day-\" + el}\n          >\n            {el}\n          </StyledListItem>\n        ))}\n      </StyledList>\n      <StyledList onScroll={debounce(handleScrollMonth, 100)}>\n        {monthList.map((el, index) => (\n          <StyledListItem\n            key={\"month-\" + el}\n            data-value={index}\n            onClick={handleScrollTo}\n            rotateX={calculateRotation(index, selectedMonth)}\n          >\n            {el}\n          </StyledListItem>\n        ))}\n      </StyledList>\n      <StyledList onScroll={debounce(handleScrollYear, 100)}>\n        {yearsList.map((el, index) => (\n          <StyledListItem\n            key={\"year-\" + el}\n            data-value={index}\n            onClick={handleScrollTo}\n            rotateY={10}\n            rotateX={calculateRotation(el, selectedYear)}\n          >\n            {el}\n          </StyledListItem>\n        ))}\n      </StyledList>\n    </StyledContainer>\n  );\n};\n\nexport default AwesomeDatePicker;\n","import * as React from \"react\";\nimport AwesomeDatePicker from \"./components/AwesomeDatePicker\";\nimport \"./App.css\";\n\nfunction App() {\n  const [date, setDate] = React.useState<Date | null>(new Date());\n  return (\n    <>\n      <div className=\"App\">\n        <p>Current Picked Date</p>\n        <p>{date?.toString()}</p>\n        <AwesomeDatePicker minYear={1999} maxYear={2069} onChange={setDate} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}